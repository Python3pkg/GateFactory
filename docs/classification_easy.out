mertyildiran@Corsair:~/Documents/GateFactory$ python examples/classification_easy.py

___ GATEFACTORY EASY CLASSIFICATION EXAMPLE ___

Create a new GateFactory with input size of 16 and output size of 1
Factory has been started

*** LEARNING ***

Generate The Dataset (40 Items Long) To Classify The Numbers Bigger & Smaller Than 0.5 & Learn for 3 Seconds Each
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds


*** TESTING ***

Test the factory with random data (20 times)
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1]	RESULT: 0	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]	RESULT: 1	Expected: [0]


Factory is now stopped

GateFactory searched the solution over 111313 different boolean combinations by going 45 levels of deepness


Overall error: 0.1


The best boolean expression has been found for your problem is:
	(((((8, 8), (11, 3)), ((2, 2), (((9, (11, 3)), (9, (11, 3))), (8, 8)))), ((((8, 8), (11, 3)), (12, (9, (11, 3)))), (((8, 8), (11, 3)), (12, (9, (11, 3)))))), (((2, 2), ((((9, (11, 3)), (9, (11, 3))), ((9, (8, 8)), ((9, (11, 3)), (9, (11, 3))))), ((14, (((2, 2), (((8, 8), (11, 3)), ((8, 8), (2, 11)))), ((((2, 2), (8, 8)), (3, 3)), ((9, (8, 8)), ((12, (9, (11, 3))), ((2, 2), (8, 8))))))), (((8, 8), (2, 11)), ((9, (11, 3)), (((11, 3), ((2, 2), (8, 8))), (((((2, 2), (8, 8)), (3, 3)), ((2, 2), (((8, 8), (11, 3)), ((8, 8), (2, 11))))), ((12, (9, (11, 3))), (((12, (9, (11, 3))), ((2, 2), (8, 8))), ((9, (11, 3)), (9, (11, 3)))))))))))), ((3, 3), ((((8, 8), (2, 11)), ((11, 3), ((2, 2), (8, 8)))), (((12, (9, (11, 3))), (((8, 8), (11, 3)), ((8, 8), (2, 11)))), (((12, (9, (11, 3))), (((8, 8), (11, 3)), ((8, 8), (2, 11)))), ((8, 8), ((((2, 2), (8, 8)), (3, 3)), ((9, (8, 8)), ((12, (9, (11, 3))), ((2, 2), (8, 8))))))))))))

Depth of this boolean expression is: 15

TeX dump is generated successfully on /home/mertyildiran/Documents/GateFactory/factory.tex
