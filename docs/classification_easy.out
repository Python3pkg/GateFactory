mertyildiran@Corsair:~$ cd Documents/GateFactory/
mertyildiran@Corsair:~/Documents/GateFactory$ rm factory.tex
mertyildiran@Corsair:~/Documents/GateFactory$ python examples/classification_easy.py

___ GATEFACTORY EASY CLASSIFICATION EXAMPLE ___

Create a new GateFactory with input size of 16 and output size of 1
Factory has been started

*** LEARNING ***

Generate The Dataset (40 Items Long) To Classify The Numbers Bigger & Smaller Than 0.5 & Learn for 3 Seconds Each
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0]	Output: [0]	and wait 3 seconds
Load Input: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0]	Output: [1]	and wait 3 seconds
Load Input: [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]	Output: [0]	and wait 3 seconds


*** TESTING ***

Test the factory with random data (20 times)
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0]	RESULT: 0	Expected: [0]
Load Input: [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1]	RESULT: 1	Expected: [1]
Load Input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]	RESULT: 0	Expected: [0]


Factory is now stopped

GateFactory searched the solution over 173840 different boolean combinations by going 49 levels of deepness


Overall error: 0.0


The best boolean expression has been found for your problem is:
	((7, (((13, (1, 13)), (14, (13, (1, 13)))), ((10, (8, 1)), (8, 10)))), (((15, (1, 3)), (10, (15, (1, 3)))), (((13, (1, 13)), (14, (13, (1, 13)))), ((((10, 10), ((8, 8), ((7, 7), (8, 1)))), (10, 10)), (((13, (1, 13)), (((8, 1), (8, 1)), (10, 10))), ((10, (((14, (13, (1, 13))), (10, 10)), (((7, 7), (8, 10)), ((8, 1), ((13, (1, 13)), (((8, 1), (8, 1)), (10, 10))))))), (12, ((0, ((2, (7, 7)), (10, ((8, 1), ((7, 7), (8, 1)))))), ((1, 13), (13, (1, 13)))))))))))

Depth of this boolean expression is: 14

TeX dump is generated successfully on /home/mertyildiran/Documents/GateFactory/factory.tex
